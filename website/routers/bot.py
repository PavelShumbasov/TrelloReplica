from typing import Callable

from fastapi import APIRouter, Depends
from starlette.requests import Request
from requests import post as req_post

from website.database import get_db
from website.models import TgUser
from website.routers import templates, flash
from website.routers.auth import manager

TOKEN = "5360985085:AAEx-eXJ2WHsHXLMZzBPxWhBNbJNU77wKyQ"
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"
router = APIRouter(tags=["bot"])


@router.get("/subscribe_on_events")
def subscribe_on_events(request: Request, user=Depends(manager), db=Depends(get_db)):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    tg_user = db.query(TgUser).filter(TgUser.user_id == user.id).first()
    is_subscribed = False
    if tg_user:
        is_subscribed = tg_user.is_subscribed
    return templates.TemplateResponse(
        "subscribe_on_events.html",
        {"request": request, "tg_user": tg_user, "is_subscribed": is_subscribed},
    )


@router.post("/subscribe_on_events")
async def subscribe_on_events(
    request: Request, user=Depends(manager), db=Depends(get_db)
):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é id –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞"""
    tg_id = (await request.form()).get("tg_id")
    if tg_id.is_alpha() or len(tg_id) != 9:
        flash(request, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id", "alert alert-danger")
    tg_user = db.query(TgUser).filter(TgUser.user_id == user.id).first()
    is_subscribed = False
    if not tg_user:
        tg_user = TgUser(user_id=user.id, tg_id=tg_id, is_subscribed=True)
        db.add(tg_user)
        flash(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", "alert alert-success")
    else:
        tg_user.tg_id = tg_id
        tg_user.is_subscribed = True
        is_subscribed = True
        flash(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç", "alert alert-success")
    db.commit()
    return templates.TemplateResponse(
        "subscribe_on_events.html",
        {"request": request, "tg_user": tg_user, "is_subscribed": is_subscribed},
    )


@router.get("/unsubscribe_from_events")
def unsubscribe_from_events(
    request: Request, user=Depends(manager), db=Depends(get_db)
):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ—Ç–∞"""
    tg_user = db.query(TgUser).filter(TgUser.user_id == user.id).first()
    if not tg_user:
        flash(request, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç", "alert alert-danger")
    else:
        flash(request, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", "alert alert-success")
        tg_user.is_subscribed = False
        db.commit()
    return templates.TemplateResponse(
        "subscribe_on_events.html",
        {
            "request": request,
            "tg_user": tg_user,
            "is_subscribed": tg_user.is_subscribed,
        },
    )


def send_messages(text, tg_user_id):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–≤–µ—Ä—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç API"""
    response = req_post(
        BASE_URL + "sendMessage", data={"chat_id": tg_user_id, "text": text}
    )


"""–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""


def task_added_message(tg_user_id, board_name, col_name, task_name):
    send_messages(
        f"‚ûï –ù–∞ –¥–æ—Å–∫–µ {board_name} –≤ —Å—Ç–æ–ª–±—Ü–µ {col_name} —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '{task_name}'",
        tg_user_id,
    )


def task_updated_message(tg_user_id, board_name, col_name):
    send_messages(
        f"üîµ –ù–∞ –¥–æ—Å–∫–µ {board_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {col_name}", tg_user_id
    )


def task_deleted_message(tg_user_id, board_name, col_name):
    send_messages(
        f"‚ùå –ù–∞ –¥–æ—Å–∫–µ {board_name} —É–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {col_name}", tg_user_id
    )


def col_added_message(tg_user_id, board_name, col_name):
    send_messages(f"‚ûï –ù–∞ –¥–æ—Å–∫–µ {board_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name}", tg_user_id)


def col_deleted_message(tg_user_id, board_name, col_name):
    send_messages(f"‚ùå –ù–∞ –¥–æ—Å–∫–µ {board_name} —É–¥–∞–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name}", tg_user_id)


def collaborator_added_message(tg_user_id, board_name, user_name):
    send_messages(
        f"‚ûï –ù–∞ –¥–æ—Å–∫—É {board_name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_name}", tg_user_id
    )


def collaborator_deleted_message(tg_user_id, board_name, user_name):
    send_messages(f"‚ùå –° –¥–æ—Å–∫–∏ {board_name} —É–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {user_name}", tg_user_id)


def as_collaborator_added_message(tg_user_id, board_name):
    send_messages(f"‚ûï –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –¥–æ—Å–∫—É {board_name}", tg_user_id)


def board_deleted_message(tg_user_id, board_name):
    send_messages(f"‚ùå –î–æ—Å–∫–∞ {board_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞", tg_user_id)


def import_to_board_message(tg_user_id, board_name, user_name):
    send_messages(
        f"üîµ –î–æ—Å–∫–∞ {board_name} –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} —Å –ø–æ–º–æ—â—å—é –∏–º–ø–æ—Ä—Ç–∞",
        tg_user_id,
    )


def send_notification(tg_users: list, send_message: Callable, *params):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ"""
    for tg_user in tg_users:
        send_message(tg_user.tg_id, *params)
